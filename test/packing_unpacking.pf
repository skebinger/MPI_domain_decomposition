!> test/packing_unpacking.pf
module packing_unpacking
    use pfunit
    use MOD_MPI_decomposition
    implicit none

    ! test parameters
    integer, parameter, private :: m_xi=11
    integer, parameter, private :: m_eta=11
    integer, parameter, private :: m_var = 3
    integer, parameter, private :: num_ghost = 10
contains

    subroutine setup_field(this,info,dat2D)
        class (MpiTestMethod), intent(inout) :: this
        type(decomp_info), intent(out) :: info
        double precision, allocatable, intent(inout) :: dat2D(:,:,:)

        type(MPI_Comm) :: comm

        integer :: p
        integer :: ilo,ihi,jlo,jhi
        integer :: left,right,bottom,top
        integer :: i,j,var,counter

        p = this%getProcessRank()
        comm = this%getMpiCommunicator()

        call initialize_decomposition(info,m_xi,m_eta,comm)
        call setup_cartesian_topology(info,comm)

        call get_local_block_bounds(info,ilo,ihi,jlo,jhi)
        allocate(dat2D(m_var,ilo-num_ghost:ihi+num_ghost,jlo-num_ghost:jhi+num_ghost))

        counter = 0
        do j=jlo-num_ghost,jhi+num_ghost
            do i=ilo-num_ghost,ihi+num_ghost
                do var=1,m_var
                    counter = counter + 1
                    dat2D(var,i,j) = var*1000+counter
                end do
            end do
        end do

    end subroutine

    subroutine free_all(this,dat2D)
        class (MpiTestMethod), intent(inout) :: this
        double precision, allocatable, intent(inout) :: dat2D(:,:,:)
        deallocate(dat2D)
    end subroutine

    @Test( npes=[1,2,3,4,5,6])
    subroutine test_packing_2D_jslice(this)
        class (MpiTestMethod), intent(inout) :: this
        type(MPI_Comm) :: comm, comm_cart
        type(decomp_info) :: info
        double precision, allocatable :: dat2D(:,:,:)

        integer :: p
        integer :: left,right,bottom,top
        integer :: ilo,ihi,jlo,jhi
        integer :: var,layer,i,j
        integer :: num_j,counter,lb,ub
        double precision, allocatable :: sendbuf(:), recvbuf(:)

        call setup_field(this,info,dat2D)

        counter=0
        comm = this%getMpiCommunicator()

        call get_local_block_bounds(info,ilo,ihi,jlo,jhi)
        call allocate_buffers(sendbuf,recvbuf,jlo,jhi,m_var)

        @assertTrue(allocated(sendbuf))
        @assertTrue(allocated(dat2D))

        lb=lbound(sendbuf,1)
        ub=ubound(sendbuf,1)

        num_j = jhi - jlo + 1

        do i=ilo,ihi
            call pack_2d_jslice(dat2D,sendbuf,i,m_var,jlo,jhi,comm)
            do var=1,m_var
                do j=jlo,jhi
                    counter = counter +1
                    @assertEqual(dat2D(var,i,j),sendbuf(counter))
                end do
            end do

            counter = 0
        end do

        call deallocate_buffers(sendbuf,recvbuf)

        call free_all(this,dat2D)
    end subroutine

    @Test( npes=[1,2,3,4,5,6])
    subroutine test_unpacking_2D_jslice(this)
        class (MpiTestMethod), intent(inout) :: this
        type(MPI_Comm) :: comm, comm_cart
        type(decomp_info) :: info
        double precision, allocatable :: dat2D(:,:,:)

        integer :: p
        integer :: left,right,bottom,top
        integer :: ilo,ihi,jlo,jhi
        integer :: var,layer,i,j
        integer :: num_j,counter,lb,ub
        double precision, allocatable :: sendbuf(:), recvbuf(:)

        call setup_field(this,info,dat2D)

        counter=0
        comm = this%getMpiCommunicator()

        call get_local_block_bounds(info,ilo,ihi,jlo,jhi)
        call allocate_buffers(sendbuf,recvbuf,jlo,jhi,m_var)

        @assertTrue(allocated(sendbuf))
        @assertTrue(allocated(dat2D))

        lb=lbound(sendbuf,1)
        ub=ubound(sendbuf,1)

        num_j = jhi - jlo + 1

        do i=1,ub
            counter = counter+1
            sendbuf(counter) = counter
        end do
        counter = 0

        do i=ilo,ihi
            call unpack_2d_jslice(dat2D,sendbuf,i,m_var,jlo,jhi,comm)
            do var=1,m_var
                do j=jlo,jhi
                    counter = counter +1
                    call assertEqual(counter,dat2D(var,i,j))
                end do
            end do

            counter = 0
        end do

        call deallocate_buffers(sendbuf,recvbuf)

        call free_all(this,dat2D)
    end subroutine

    @Test( npes=[1,2,3,4,5,6])
    subroutine test_packing_2D_islice(this)
        class (MpiTestMethod), intent(inout) :: this
        type(MPI_Comm) :: comm, comm_cart
        type(decomp_info) :: info
        double precision, allocatable :: dat2D(:,:,:)

        integer :: i,j,counter,var
        integer :: ilo,ihi,jlo,jhi
        double precision, allocatable :: sendbuf(:),recvbuf(:)
        double precision :: probe
        integer :: lb,ub,num_i

        call setup_field(this,info,dat2D)

        counter=0
        comm = this%getMpiCommunicator()

        call get_local_block_bounds(info,ilo,ihi,jlo,jhi)
        call allocate_buffers(sendbuf,recvbuf,ilo,ihi,m_var)
        lb=lbound(sendbuf,1)
        ub=ubound(sendbuf,1)

        num_i = ihi - ilo + 1

        do j=jlo,jhi
            call pack_2d_islice(dat2D,sendbuf,j,m_var,ilo,ihi,comm)
            do var=1,m_var
                do i=ilo,ihi
                    counter = counter +1
                    @assertEqual(dat2D(var,i,j),sendbuf(counter))
                end do
            end do

            counter = 0
        end do

        call deallocate_buffers(sendbuf,recvbuf)

        call free_all(this,dat2D)
    end subroutine

    @Test( npes=[1,2,3,4,5,6])
    subroutine test_unpacking_2D_islice(this)
        class (MpiTestMethod), intent(inout) :: this
        type(MPI_Comm) :: comm, comm_cart
        type(decomp_info) :: info
        double precision, allocatable :: dat2D(:,:,:)

        integer :: p
        integer :: left,right,bottom,top
        integer :: ilo,ihi,jlo,jhi
        integer :: var,layer,i,j
        integer :: num_i,counter,lb,ub
        double precision, allocatable :: sendbuf(:), recvbuf(:)

        call setup_field(this,info,dat2D)

        counter=0
        comm = this%getMpiCommunicator()

        call get_local_block_bounds(info,ilo,ihi,jlo,jhi)
        call allocate_buffers(sendbuf,recvbuf,ilo,ihi,m_var)

        @assertTrue(allocated(sendbuf))
        @assertTrue(allocated(dat2D))

        lb=lbound(sendbuf,1)
        ub=ubound(sendbuf,1)

        num_i = ihi - ilo + 1

        do i=1,ub
            counter = counter+1
            sendbuf(counter) = counter
        end do
        counter = 0

        do j=jlo,jhi
            call unpack_2d_islice(dat2D,sendbuf,j,m_var,ilo,ihi,comm)
            do var=1,m_var
                do i=ilo,ihi
                    counter = counter +1
                    call assertEqual(counter,dat2D(var,i,j))
                end do
            end do

            counter = 0
        end do

        call deallocate_buffers(sendbuf,recvbuf)

        call free_all(this,dat2D)
    end subroutine

end module
